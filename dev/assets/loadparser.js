function asciiToBinary(str) {
    return atob(str)
}

function decode(encoded) {
    var binaryString =  asciiToBinary(encoded);
    var bytes = new Uint8Array(binaryString.length);
    for (var i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
    }
    return bytes;
}

var encoded_levels = new Array();
class L0Builder {
    data = {};
    const = {};
    labels = {};
    statements = [];
    ECS = new ECS();

    handle(node) {
        if (["source_file", "declarations","statements"].includes(node.type)) { 
            for (var i = 0; i < node.childCount; i++){
                this.handle(node.child(i));
            }
        }

        else if (["statement", "declaration"].includes(node.type)) { 
            this.handle(node.child(0));
        }

        else if (node.type === "expression") {
            switch (node.childCount) {
                case 1:
                    return [this.handle(node.child(0))];
                case 2:
                    return [node.child(0), this.handle(node.child(1))];
                case 3:
                    return [this.handle(node.child(0)), node.child(1), this.handle(node.child(2))];
            }
        }

        else if (node.type === "number") {
            return new Content(CONTENT_TYPES.NUMBER, parseInt(node.text));
        }

        else if (node.type === "constant") {
            return new Content(CONTENT_TYPES.CONSTANT, node.text);
        }

        else if (node.type === "data") {
            return new Content(CONTENT_TYPES.DATA, node.text);
        }

        else if (["memory_access" ,"reader", "writer"].includes(node.type)) {
            return this.handle(node.child(0));
        }

        else if (node.type === "register") {
            return new Content(CONTENT_TYPES.REGISTER, node.text);
        }

        else if (node.type === "memory") {
            return new Content(CONTENT_TYPES.MEMORY, this.handle(node.child(1)), get_datatype(node.child(3).text));
        }

        else if (node.type === "assignment") {
            var is_conditional = node.child(1).text === "?=" ? true : false;
            var writer = node.child(0);
            var expression = this.handle(node.child(2));
            // TODO: Change such that assign take an expression as input?
            switch (expression.length) {
                case 1:
                    writer = this.handle(writer)
                    var reader = expression[0];
                    this.assign(node, is_conditional, writer, reader);
                    break;
                case 2:
                    writer = this.handle(writer);
                    var opr = expression[0];
                    var reader = expression[1];
                    this.assign_unary(node, is_conditional, writer, opr.text, reader);
                    break;
                case 3:
                    writer = this.handle(writer);
                    var reader1 = expression[0];
                    var opr = expression[1];
                    var reader2 = expression[2];
                    this.assign_binary(node, is_conditional, writer, reader1, opr.text, reader2);
                    break;
            }
        }
        
        else if(node.type === "constant_declaration"){
            let id = node.child(1).text;
            let value = node.child(2).text;
            this.const[id] = value;
        }
        
        else if(node.type === "data_declaration"){
            let id = node.child(1).text;
            let value = node.child(2).text;
            this.data[id] = value;
        }
        
        else if(node.type === "label"){
            this.labels[node.text] = this.statements.length;
        }
        
        else if(node.type === "syscall"){
            this.push_statement(node, new ByteCode(OP.SYSCALL));
        }
    }

    assign(node, is_conditional, writer, reader) {
        this.push_statement(node, new ByteCode(OP.ASSIGN, [is_conditional, writer, reader]));
    }

    assign_unary(node, is_conditional, writer, opr, reader) {
        this.push_statement(node, new ByteCode(OP.ASSIGN_UN, [is_conditional, writer, opr, reader]));
    }

    assign_binary(node, is_conditional, writer, reader1, opr, reader2) {
        this.push_statement(node, new ByteCode(OP.ASSIGN_BIN, [is_conditional, writer, reader1, opr, reader2]));
    }

    push_statement(node, byte_code) {
        this.statements.push(byte_code);
        this.ECS.nodes.push(node);
    }
}
encoded_levels.push(decode('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AgwRAABBASEFIAJBMGtBCk8NBEEAIQNBLyEBDA8LIABBEjsBBCAAIAAoAgwRAABBACEDQQEhBEEwIQEgAkEiRwRAIAJFIAJBCkZyDQtBASEBC0EBIQUMDgtBACEDDAELQQEhAwsgACADOwEEIAAgACgCDBEAAAtBASEEDAYLIAJB/ABGDQlBKSEBIAJB3wBGDQlBASEEIAJBX3FBwQBrQRpJDQkMBQtBASEEIAJB/ABGDQgMBAtBASEEIAJB/ABGDQcMAwtBACEDQSohAQwGCyACQSFrIgJBHksNACAFIQRBASACdEGBkICABHENBQwBCyAFIQQLIARBAXEPC0EAIQMLQSchAQwBC0EBIQNBAyEBCyAAIAMgACgCCBEFAAwACwALC68XAQAjAAuoFwYABwABAAcAEQABABAAEgABABwAEwABAB8AJAABABsADwAFAAsADAANAA4AEQAGABMAAQADABYAAQAEAAMAAQAgACUAAQAVABYAAgAWABcAGQAEAAcADQAOAA8ACgAbAAEAAAAdAAEABwAgAAEADQAjAAEADgAmAAEADwAEAAEAIQAUAAEAHQAVAAEAHwAiAAEAGQApAAEAGgAKAAcAAQAHAAkAAQANAAsAAQAOAA0AAQAPACkAAQAAAAQAAQAhABQAAQAdABUAAQAfACIAAQAZACkAAQAaAAYAAwABAAMABQABAAQAAwABACAAJQABABUAFgACABYAFwArAAQABwANAA4ADwAKAAcAAQAHAAkAAQANAAsAAQAOAA0AAQAPAAUAAQAhABQAAQAdABUAAQAfABgAAQAYACIAAQAZACkAAQAaAAQABwABAAcAEwABAB8AKAABABwADwAFAAsADAANAA4AEQAEAAcAAQAHABMAAQAfACsAAQAcAA8ABQALAAwADQAOABEABwAHAAEABwALAAEADgANAAEADwAUAAEAHQAVAAEAHwAaAAEAGQApAAEAGgADABsAAQAAAC0AAQACAC8ABAAHAA0ADgAPAAEAMQAGAAMABAAHAA0ADgAPAAMAMwABAAAANQABAAIANwAEAAcADQAOAA8AAQA5AAUAAAAHAA0ADgAPAAEAMwAFAAAABwANAA4ADwACABsAAQAeADsABAALAAwADgARAAEAPQAEAAEABQAGABAAAgA/AAEAAQBBAAEAEAABAEMAAgABABAAAQBFAAIABQAGAAEARwACAAUABgABAEkAAQABAAEASwABAAIAAQBNAAEAAAABAE8AAQALAAEAUQABAAEAAQBTAAEACAABAFUAAQABAAEAVwABAAEAAQBZAAEACgABAFsAAQAIAAEAXQABABIAAQBfAAEAEQABAGEAAQABAAEAYwABAAAAAQBlAAEAAQABAGcAAQABAAEAaQABAAkAAQBrAAEAAAABAG0AAQABAAEAbwABAAEAAQBxAAEADAABAHMAAQABAAAAAAAAAAAAAAAAABcAAAAuAAAATQAAAGwAAACDAAAAogAAALMAAADEAAAA2gAAAOcAAADwAAAA/QAAAAUBAAANAQAAFwEAAB4BAAAlAQAAKgEAAC8BAAA0AQAAOAEAADwBAABAAQAARAEAAEgBAABMAQAAUAEAAFQBAABYAQAAXAEAAGABAABkAQAAaAEAAGwBAABwAQAAdAEAAHgBAAB8AQAAgAEAAIQBAACIAQAAAAAAAAAAAAAAAQABAAABAAABAAABAAABAAABAAABAAABAAABAAABAQABAQABAQABAQABAQABAQABAQABAQABAQABAQABAQABAQABAQABAQABAQABAQABAQABAQABAQABAQABAQABAQAAAAAAAAAAAAAAAAAAAAAAAAABAAIAAwAEAAUABgAHAAgACQAKAAsADAANAA4ADwAQABEAEgATABQAFQAWABcAGAAZABoAGwAcAB0AHgAfACAAIQAAAAAAAAAAAAAAAAABAAEAAAABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMABQAAAAAABwAAAAAAAAAAAAAACQALAA0AAAAAAAAAJwAHACUAFgAWACMAIgApAAAAAAAUAAAAFQAGAAUAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAwAAAAAAAAABAQAAAAAAAAAAGQAAAAAAAQEAAAAAAAAAACoAAAAAAAEBAAAAAAAAAAAQAAAAAAABAQAAAAAAAAAACgAAAAAAAQEAAAAAAAAAABUAAAAAAAEBAAAAAAAAAAApAAAAAAABAQAAAAAAAAAAEwAAAAAAAQAAAAAAAAAAAAgAAAAAAAIBAAAAAAAAAQIgAAAAAAAAABkAAAEAAAIBAAAAAAAAAQIgAAAAAAAAACoAAAEAAAEBAAAAAAAAAQIgAAAAAAABAQAAAAAAAAECIQAAAAAAAgEAAAAAAAABAiEAAAAAAAAAEAAAAQAAAgEAAAAAAAABAiEAAAAAAAAACgAAAQAAAgEAAAAAAAABAiEAAAAAAAAAFQAAAQAAAgEAAAAAAAABAiEAAAAAAAAAKQAAAQAAAQEAAAAAAAABARgAAAAAAAEBAAAAAAAAAQEUAAAAAAABAQAAAAAAAAAADwAAAAAAAQAAAAAAAAABAiEAAAAAAAEBAAAAAAAAAQMgAAAAAAABAQAAAAAAAAEDIQAAAAAAAQEAAAAAAAAAAA4AAAAAAAEAAAAAAAAAAQMhAAAAAAABAQAAAAAAAAEEIQAAAAAAAQEAAAAAAAAAAB8AAAAAAAEBAAAAAAAAAQUfAAAAAAABAQAAAAAAAAEBGwAAAAAAAQEAAAAAAAAAAAkAAAAAAAEBAAAAAAAAAQEcAAAAAAABAQAAAAAAAAAAAgAAAAAAAQEAAAAAAAABAR0AAAAAAAEBAAAAAAAAAQEVAAAAAAABAQAAAAAAAAAADAAAAAAAAQEAAAAAAAABAhMAAAAAAAEBAAAAAAAAAAAhAAAAAAABAQAAAAAAAAAADQAAAAAAAQEAAAAAAAAAAB4AAAAAAAEBAAAAAAAAAQMWAAAAAAABAQAAAAAAAAEDFwAAAAAAAQEAAAAAAAAAACYAAAAAAAEBAAAAAAAAAQEeAAAAAAABAQAAAAAAAAAAHQAAAAAAAQEAAAAAAAAAABwAAAAAAAEBAAAAAAAAAAALAAAAAAABAQAAAAAAAAEBEwAAAAAAAQEAAAAAAAABAxoAAAAAAAEBAAAAAAAAAAAXAAAAAAABAQAAAAAAAAAAEQAAAAAAAQEAAAAAAAACAAAAAAAAAAEBAAAAAAAAAQIbAAAAAAABAQAAAAAAAAEBGQAAAAAAAQEAAAAAAAAAACAAAAAAAAEBAAAAAAAAAQMbAAAAAABtZW1vcnkAY29uc3QAYXNzaWdubWVudABzdGF0ZW1lbnQAY29uc3RhbnQAc3RhdGVtZW50cwBtZW1vcnlfYWNjZXNzAGRlY2xhcmF0aW9ucwBvcGVyYXRvcgByZWdpc3RlcgB3cml0ZXIAcmVhZGVyAG51bWJlcgBjb25zdGFudF9kZWNsYXJhdGlvbgBkYXRhX2RlY2xhcmF0aW9uAGV4cHJlc3Npb24Ac3lzY2FsbABsYWJlbABzdHJpbmcAdHlwZQBzb3VyY2VfZmlsZQBlbmQAZGF0YQBdAFsAPz0AOj0AOwBzdGF0ZW1lbnRzX3JlcGVhdDEAZGVjbGFyYXRpb25zX3JlcGVhdDEALAAKAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbAAAAAAAAABsAAAAAAAAAAAAAAAAAAAACAAAAAgAAAAIAAAAAAAAAAAAAAAAAAAAbAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAAIgAAAAAAAAATAAAAAAAAACwAAAACAAAAAQAAAAAAAAAFAAAAkAQAAAAAAAAgAwAAIAUAACALAAAAAAAAAAAAAAAAAADQAwAAQAQAAIQEAACGBAAA4AkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACXCQAAqgkAANYJAADPCAAAmwkAAKcJAACkCQAAogkAANQJAACgCQAAhgkAAOoIAACbCQAAeQkAACIJAABxCQAAGQkAADkJAAB/CQAAiwkAAAwJAABaCQAAQAkAAFUJAADzCAAA4AgAANUIAABmCQAAMgkAACsJAAD+CAAAyAgAAL8JAACsCQAA'));
class L1Builder extends L0Builder {
    handle(node) {
        if (node.type === "goto") {
            this.goto(node)
        } else {
            return super.handle(node);
        }
    }

    goto(node) {
        var reader = node.child(1);
        var reader1;
        if (reader.type === "label") {
            reader1 = new Content(CONTENT_TYPES.LABEL, reader.text);
        } else if (reader.type === "register") {
            reader1 = new Content(CONTENT_TYPES.REGISTER, reader.text);
        }
        var reader2 = new Content(CONTENT_TYPES.NUMBER, 1);
        var writer = new Content(CONTENT_TYPES.REGISTER, '$!');
        this.assign_binary(node, true, writer, reader1, '-', reader2);
    }
}
encoded_levels.push(decode(''));
class L2Builder extends L1Builder {
    handle(node) {
        if (node.type === "scope") { 
            var frame = new StackFrame();
            frame.next = this.head;
            this.head = frame;
            this.in_scope = true;
            Stack.push(this.variable_pointer);
            for (var i = 0; i < node.childCount; i++){
                this.handle(node.child(i));
            }
            var offset = Stack.pop() - this.variable_pointer;
            this.variable_pointer += offset;
            this.push_statement(node.child(node.childCount-1), new ByteCode(OP.ASSIGN_BIN, [false, new Content(CONTENT_TYPES.REGISTER, '$vp'), new Content(CONTENT_TYPES.REGISTER, '$vp'), '+', new Content(CONTENT_TYPES.NUMBER, offset)]));
            if (this.variable_pointer === 112) {
                this.in_scope = false;
            }
        } 
        else if (node.type === "variable" && this.in_scope) {
            var variable_size = get_variable_bytesize(node.child(2).text);
            this.variable_pointer -= variable_size;
            this.head.variables[node.child(0).text] = [this.stack_pointer - this.variable_pointer, node.child(2).text];
            var expression = super.handle(node.child(4));
            this.push_statement(node, new ByteCode(OP.ASSIGN_BIN, [false, new Content(CONTENT_TYPES.REGISTER, '$vp'), new Content(CONTENT_TYPES.REGISTER, '$sp'), '-', new Content(CONTENT_TYPES.NUMBER, this.stack_pointer - this.variable_pointer)]));
            this.push_statement(node, new ByteCode(OP.ASSIGN, [false, new Content(CONTENT_TYPES.MEMORY, new Content(CONTENT_TYPES.REGISTER, '$vp'), get_datatype(node.child(2).text))].concat(expression)))            
        }
        else if (node.type === "variable_name" && this.in_scope) {
            var current = this.head;
            while (current != null) {
                if (node.text in current.variables) {
                    this.push_statement(node, new ByteCode(OP.ASSIGN_BIN, [false, new Content(CONTENT_TYPES.REGISTER, '$vp'), new Content(CONTENT_TYPES.REGISTER, '$sp'), '-', new Content(CONTENT_TYPES.NUMBER,  current.variables[node.text][0])]));
                    return new Content(CONTENT_TYPES.MEMORY, new Content(CONTENT_TYPES.REGISTER, '$vp'),  get_datatype(current.variables[node.text][1]));
                }   
                current = current.next;
            }
        }
        else if (node.type === "variable") { 
            this.variable_declaration(node);
        } else if (node.type === "variable_name") {
            return new Content(CONTENT_TYPES.MEMORY, new Content(CONTENT_TYPES.DATA, '&_' + node.text), get_datatype(this.variables["&_" + node.text]));
        } else {
            return super.handle(node);
        }
    }

    variable_declaration(node) {
        var variable_name = node.child(0);
        var type = node.child(2);
        var expression = node.child(4);
        var variable_size = parseInt(type.text.replace(/\D/g, ''));
        this.variables['&_' + variable_name.text] = type.text;
        var memory_allocation = "";
        for (var i = 0; i < variable_size/8; i++) {
            memory_allocation += "0";
        }
        this.data['&_' + variable_name.text] = memory_allocation;
        var _expression = this.handle(expression);
        this.push_statement(node, new ByteCode(OP.ASSIGN, [false, new Content(CONTENT_TYPES.MEMORY, new Content(CONTENT_TYPES.DATA, '&_' + variable_name.text), get_datatype(type.text))].concat(_expression)));
    }

    get_frame_size(variables) {
        var max = 0;
        for (var key in variables) {
            if (variables[key][0] > max) {
                max = variables[key][0];
            }
        }
        return max;
    }

    variables = {}
    head = null
    stack_pointer = 112;
    variable_pointer = 112;
    in_scope = false;
}

class StackFrame {
    next;
    variables;
    constructor() {
        this.next= null;
        this.variables = {};
    }
}

const Stack = {
    items: [],

    push(element)
    {
        this.items.push(element);
    },

    pop()
    {
        if (this.items.length == 0)
            return "Underflow";
        return this.items.pop();
    }
}
encoded_levels.push(decode('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CQA2AAEADAA5AAEAEgA8AAEAEwA/AAEAFABCAAEAGAAFAAEAKwAbAAEAKAAeAAEAJgAvAAQAIAAhACIAIwAMAAcAAQAFAAkAAQAJAAsAAQAMAA8AAQATABMAAQAYAEUAAQAGAEcAAQASAEkAAQAUAAUAAQArABsAAQAoAB4AAQAmAC8ABAAgACEAIgAjAAsABwABAAUACQABAAkACwABAAwADwABABMAEwABABgARwABABIASQABABQABgABACsAGwABACgAHgABACYALwAEACAAIQAiACMABwADAAEAAwAFAAEABAAJAAEAKQA2AAEAGwA0AAIAHAAdAE0AAwAJABQAGABLAAQABQAMABIAEwAHAE8AAQADAFIAAQAEAAkAAQApADYAAQAbADQAAgAcAB0AVwADAAkAFAAYAFUABAAFAAwAEgATAAoABwABAAUACQABAAkACwABAAwADwABABMAEQABABQAEwABABgAGwABACgAHgABACYAKQABAB8AOgAEACAAIQAiACMACQAHAAEABQAJAAEACQALAAEADAAPAAEAEwATAAEAGABZAAEAFAAbAAEAKAAeAAEAJgAmAAQAIAAhACIAIwAGAAsAAQAMAF0AAQAVABwAAQAoAB8AAQAlADEAAQAkAFsABgAQABEAEgATABYAGAAGAAsAAQAMAF0AAQAVABwAAQAoAB8AAQAlADwAAQAkAFsABgAQABEAEgATABYAGAAEAAsAAQAMABwAAQAoAD0AAQAlAFsABgAQABEAEgATABYAGAACAF8AAQACAGEACAAFAAYACQAMABIAEwAUABgAAgBjAAEAAgBlAAgABQAGAAkADAASABMAFAAYAAQACwABAAwAHAABACgAOAABACUAWwAGABAAEQASABMAFgAYAAMAFwABAAAAZwABAAIAaQAHAAUACQAMABIAEwAUABgAAgBtAAQABQAMABIAEwBrAAUAAwAEAAkAFAAYAAMAbwABAAAAcQABAAIAcwAHAAUACQAMABIAEwAUABgAAgB3AAMACQAUABgAdQAFAAAABQAMABIAEwACAGEAAwAJABQAGAB5AAUABQAGAAwAEgATAAIAcwADAAkAFAAYAG8ABQAAAAUADAASABMAAgB9AAMACQAUABgAewAFAAUABgAMABIAEwACACsAAQAnAH8ABAAQABEAEwAWAAEAgQAEAAEABwAIABUAAQCDAAIABwAIAAEAhQACAAEAFQABAIcAAgASABMAAQCJAAIABwAIAAIAiwABAAEAjQABABUAAQCPAAEAAAABAJEAAQACAAEAkwABABAAAQCVAAEAAAABAJcAAQABAAEAmQABAAEAAQCbAAEAAQABAJ0AAQAPAAEAnwABAAEAAQChAAEAAQABAKMAAQAPAAEApQABAA0AAQCnAAEACwABAKkAAQANAAEAqwABAAEAAQCtAAEAAQABAK8AAQAXAAEAsQABAAEAAQCzAAEAFgABALUAAQABAAEAtwABAAEAAQC5AAEADgABALsAAQABAAEAvQABAAAAAQC/AAEAAQABAMEAAQAKAAEAwwABAAEAAQDFAAEAEQABAMcAAQABAAEAyQABAAEAAAAAAAAAAAAAACsAAABWAAAAgQAAAKkAAADRAAAA9gAAABIBAAAuAQAAUAEAAG8BAACHAQAAnwEAALEBAAC/AQAAzQEAAN8BAADvAQAA/QEAAA0CAAAaAgAAJwIAADQCAABBAgAASwIAAFICAABXAgAAXAIAAGECAABmAgAAbQIAAHECAAB1AgAAeQIAAH0CAACBAgAAhQIAAIkCAACNAgAAkQIAAJUCAACZAgAAnQIAAKECAAClAgAAqQIAAK0CAACxAgAAtQIAALkCAAC9AgAAwQIAAMUCAADJAgAAzQIAANECAADVAgAA2QIAAN0CAADhAgAAAAEAAQAAAQAAAQAAAQAAAQAAAQAAAQAAAQAAAQAAAQAAAQAAAQAAAQAAAQAAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAIAAwAEAAUABgAHAAgACQAKAAsADAANAA4ADwAQABEAEgATABQAFQAWABcAGAAZABoAGwAcAB0AHgAfACAAIQAiACMAJAAlACYAJwAoACkAKgArAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAEQAAABEAAAARAAAAEQAAABEAAAARAAAAAwAAAAMAAAARAAAAEQAAAAIAAAACAAAAAgAAABAAAAAQAAAAAgAAABAAAAADAAAAEAAAABEAAAARAAAAEQAAABEAAAAAAAAAAwAAAAMAAAADAAAAAAAAAAMAAAADAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAEAAAABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQAAAAEAAQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAFAAcAAAAAAAAACQAAAAAACwAAAAAAAAAAAAAADQAPABEAAAAAAAAAEwA3AAIANgA0ADQAIAAzADoAOgA6ADoAAAAAAB4AAAAbAAgAAwAAAAAAAAAAAAAAAQAAAAAAAAADAAAAAAAAAAEAAAAAAAAAAAAiAAAAAAABAAAAAAAAAAAAOwAAAAAAAQEAAAAAAAAAAAcAAAAAAAEAAAAAAAAAAAAdAAAAAAABAQAAAAAAAAAAGQAAAAAAAQEAAAAAAAAAAAoAAAAAAAEBAAAAAAAAAAAbAAAAAAABAAAAAAAAAAAAOgAAAAAAAQAAAAAAAAAAADkAAAAAAAEBAAAAAAAAAQEeAAAAAAABAQAAAAAAAAECKgAAAAAAAgEAAAAAAAABAioAAAAAAAAABwAAAQAAAgAAAAAAAAABAioAAAAAAAAAHQAAAQAAAgEAAAAAAAABAioAAAAAAAAAGQAAAQAAAgEAAAAAAAABAioAAAAAAAAACgAAAQAAAgEAAAAAAAABAioAAAAAAAAAGwAAAQAAAgAAAAAAAAABAioAAAAAAAAAOgAAAQAAAgAAAAAAAAABAioAAAAAAAAAOQAAAQAAAgEAAAAAAAABAisAAAAAAAAABwAAAQAAAQEAAAAAAAABAisAAAAAAAIAAAAAAAAAAQIrAAAAAAAAAB0AAAEAAAIBAAAAAAAAAQIrAAAAAAAAABkAAAEAAAIBAAAAAAAAAQIrAAAAAAAAAAsAAAEAAAIBAAAAAAAAAQIrAAAAAAAAABsAAAEAAAIAAAAAAAAAAQIrAAAAAAAAAC8AAAEAAAIAAAAAAAAAAQIrAAAAAAAAADkAAAEAAAEBAAAAAAAAAAAoAAAAAAABAQAAAAAAAAAACwAAAAAAAQAAAAAAAAAAAC8AAAAAAAEBAAAAAAAAAQEaAAAAAAABAAAAAAAAAAEBGgAAAAAAAgAAAAAAAAABAikAAAAAAAAAIgAAAQAAAgAAAAAAAAABAikAAAAAAAAAOwAAAQAAAQEAAAAAAAABAikAAAAAAAEAAAAAAAAAAQIpAAAAAAABAAAAAAAAAAAAJgAAAAAAAQEAAAAAAAAAABwAAAAAAAEAAAAAAAAAAAARAAAAAAABAQAAAAAAAAAAGAAAAAAAAQAAAAAAAAABAysAAAAAAAEBAAAAAAAAAAAWAAAAAAABAAAAAAAAAAECKwAAAAAAAQEAAAAAAAAAABcAAAAAAAEAAAAAAAAAAQIqAAAAAAABAAAAAAAAAAEDKQAAAAAAAQEAAAAAAAABAykAAAAAAAEBAAAAAAAAAQMqAAAAAAABAQAAAAAAAAAAFQAAAAAAAQAAAAAAAAABAyoAAAAAAAEBAAAAAAAAAQQqAAAAAAABAAAAAAAAAAEEKgAAAAAAAQEAAAAAAAABAysAAAAAAAEBAAAAAAAAAQQrAAAAAAABAAAAAAAAAAEEKwAAAAAAAQEAAAAAAAAAAC0AAAAAAAEBAAAAAAAAAQUoAAAAAAABAQAAAAAAAAEBJgAAAAAAAQEAAAAAAAABASUAAAAAAAEBAAAAAAAAAAAuAAAAAAABAQAAAAAAAAAADAAAAAAAAQEAAAAAAAABASQAAAAAAAEBAAAAAAAAAAAOAAAAAAABAQAAAAAAAAEBGQAAAAAAAQEAAAAAAAAAABMAAAAAAAEBAAAAAAAAAAAyAAAAAAABAQAAAAAAAAECGQAAAAAAAQEAAAAAAAABAxwAAAAAAAEBAAAAAAAAAQMdAAAAAAABAQAAAAAAAAAADwAAAAAAAQEAAAAAAAAAACwAAAAAAAEBAAAAAAAAAQMgAAAAAAABAQAAAAAAAAAAFAAAAAAAAQEAAAAAAAAAADUAAAAAAAEBAAAAAAAAAAAqAAAAAAABAQAAAAAAAAAADQAAAAAAAQEAAAAAAAABAScAAAAAAAEBAAAAAAAAAQIiAAAAAAABAQAAAAAAAAAAEAAAAAAAAQEAAAAAAAAAACUAAAAAAAEBAAAAAAAAAQMhAAAAAAABAQAAAAAAAAAAJAAAAAAAAQEAAAAAAAAAABIAAAAAAAEBAAAAAAAAAQEbAAAAAAABAQAAAAAAAAAAGgAAAAAAAQEAAAAAAAAAACEAAAAAAAEBAAAAAAAAAgAAAAAAAAABAQAAAAAAAAECJAAAAAAAAQEAAAAAAAAAACcAAAAAAAEBAAAAAAAAAQEfAAAAAAABAQAAAAAAAAAAMAAAAAAAAQEAAAAAAAABBSMAAAAAAAEBAAAAAAAAAQMkAAAAAAB9AHsAbWVtb3J5AGNvbnN0AGFzc2lnbm1lbnQAc3RhdGVtZW50AGNvbnN0YW50AHN0YXRlbWVudHMAbWVtb3J5X2FjY2VzcwBkZWNsYXJhdGlvbnMAb3BlcmF0b3IAcmVnaXN0ZXIAd3JpdGVyAHJlYWRlcgBudW1iZXIAZ290bwBjb25zdGFudF9kZWNsYXJhdGlvbgBkYXRhX2RlY2xhcmF0aW9uAGV4cHJlc3Npb24Ac3lzY2FsbABsYWJlbABzdHJpbmcAdHlwZQBzY29wZQB2YXJpYWJsZV9uYW1lAHNvdXJjZV9maWxlAHZhcmlhYmxlAGVuZABkYXRhAF0AWwA/PQA6PQA7ADoAc3RhdGVtZW50c19yZXBlYXQxAGRlY2xhcmF0aW9uc19yZXBlYXQxAHNjb3BlX3JlcGVhdDEALAAKAAAADQAAACwAAAAAAAAAGQAAAAAAAAA+AAAAAgAAAAEAAAAAAAAABQAAAMAIAAAAAAAA0AUAAHAJAACgEQAAAAAAAAAAAAAAAAAAwAYAAFAHAACoBwAAqgcAAMAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvRAAANAQAAAMEQAA0w8AAMEQAADKDwAAyA8AAM0QAADKEAAARBAAANIQAADOEAAAyBAAAAoRAADGEAAAjxAAAO4PAADBEAAAghAAACYQAAB6EAAAHRAAAD0QAACIEAAAmhAAAKgQAAAQEAAAYxAAAEkQAABeEAAA9w8AAOQPAACUEAAA2Q8AAEQQAAC0EAAAbxAAADYQAAAvEAAAAhAAAMwPAADnEAAA1BAAAPwQAAA='));
for (var i = 0; i < encoded_levels.length; i++){
    var opt = document.createElement('option');
    opt.value = i;
    opt.innerHTML = "L"+i;
    document.getElementById('levels').appendChild(opt);
}
document.getElementById('levels').value = 2;

function get_builder(level) {
  switch (level) {
        case 0:
            return new L0Builder();
        case 1:
            return new L1Builder();
        case 2:
            return new L2Builder();
}
}