function asciiToBinary(str) {
    return atob(str)
}

function decode(encoded) {
    var binaryString =  asciiToBinary(encoded);
    var bytes = new Uint8Array(binaryString.length);
    for (var i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
    }
    return bytes;
}

var encoded_levels = new Array();
class L0Builder {
    data = {};
    const = {};
    labels = {};
    statements = [];
    ECS = new ECS();

    handle(node) {
        if (["source_file", "declarations","statements"].includes(node.type)) { 
            for (var i = 0; i < node.childCount; i++){
                this.handle(node.child(i));
            }
        }

        else if (node.type === "comment") {
            return;
        }

        else if (["statement", "declaration"].includes(node.type)) { 
            this.handle(node.child(0));
        }

        else if (["expression", "memory_expression"].includes(node.type)) {
            switch (node.childCount) {
                case 1:
                    return new Expression(CONTENT_TYPES.EXPRESSION, this.handle(node.child(0)));
                case 2:
                    return new Expression(CONTENT_TYPES.UN_EXPRESSION, this.handle(node.child(1)), node.child(0).text);
                case 3:
                    this.push_statement(node, new ByteCode(OP.ASSIGN, [false, new Content(CONTENT_TYPES.REGISTER, '$x'), this.handle(node.child(0))]));
                    this.push_statement(node, new ByteCode(OP.ASSIGN, [false, new Content(CONTENT_TYPES.REGISTER, '$y'), this.handle(node.child(2))]));
                    return new Expression(CONTENT_TYPES.BIN_EXPRESSION, new Content(CONTENT_TYPES.REGISTER, '$x'), node.child(1).text, new Content(CONTENT_TYPES.REGISTER, '$y'));
            }
        }

        else if (node.type === "number") {
            return new Content(CONTENT_TYPES.NUMBER, parseInt(node.text));
        }

        else if (node.type === "constant") {
            return new Content(CONTENT_TYPES.CONSTANT, node.text);
        }

        else if (node.type === "data") {
            return new Content(CONTENT_TYPES.DATA, node.text);
        }

        else if (["memory_reader" ,"reader", "writer"].includes(node.type)) {
            return this.handle(node.child(0));
        }

        else if (node.type === "register") {
            return new Content(CONTENT_TYPES.REGISTER, node.text);
        }

        else if (node.type === "memory") {
            return new Content(CONTENT_TYPES.MEMORY, this.handle(node.child(1)), get_datatype(node.child(3).text));
        }

        else if (node.type === "assignment") {
            var is_conditional = node.child(1).text === "?=" ? true : false;
            var writer = node.child(0);
            var expression = this.handle(node.child(2));
            // TODO: Change such that assign take an expression as input?
            switch (expression.type) {
                case CONTENT_TYPES.EXPRESSION:
                    writer = this.handle(writer)
                    this.assign(node, is_conditional, writer, expression.reader1);
                    break;
                case CONTENT_TYPES.UN_EXPRESSION:
                    writer = this.handle(writer);
                    this.assign_unary(node, is_conditional, writer, expression.opr, expression.reader1);
                    break;
                case CONTENT_TYPES.BIN_EXPRESSION:
                    writer = this.handle(writer);
                    this.assign_binary(node, is_conditional, writer, expression.reader1, expression.opr, expression.reader2);
                    break;
            }
        }
        
        else if(node.type === "constant_declaration"){
            let id = node.child(1).text;
            let value = node.child(2).text;
            this.const[id] = value;
        }
        
        else if(node.type === "data_declaration"){
            let id = node.child(1).text;
            let value = node.child(2).text;
            this.data[id] = value;
        }
        
        else if(node.type === "label"){
            this.labels[node.text] = this.statements.length;
        }
        
        else if(node.type === "syscall"){
            this.push_statement(node, new ByteCode(OP.SYSCALL));
        }
    }

    assign(node, is_conditional, writer, reader) {
        this.push_statement(node, new ByteCode(OP.ASSIGN, [is_conditional, writer, reader]));
    }

    assign_unary(node, is_conditional, writer, opr, reader) {
        this.push_statement(node, new ByteCode(OP.ASSIGN_UN, [is_conditional, writer, opr, reader]));
    }

    assign_binary(node, is_conditional, writer, reader1, opr, reader2) {
        this.push_statement(node, new ByteCode(OP.ASSIGN_BIN, [is_conditional, writer, reader1, opr, reader2]));
    }

    push_statement(node, byte_code) {
        this.statements.push(byte_code);
        this.ECS.nodes.push(node);
    }
}
encoded_levels.push(decode(''));
class L1Builder extends L0Builder {
    handle(node) {
        if (node.type === "goto") {
            this.goto(node)
        } else {
            return super.handle(node);
        }
    }

    goto(node) {
        var reader = node.child(1);
        var reader1;
        if (reader.type === "label") {
            reader1 = new Content(CONTENT_TYPES.LABEL, reader.text);
        } else if (reader.type === "register") {
            reader1 = new Content(CONTENT_TYPES.REGISTER, reader.text);
        }
        var reader2 = new Content(CONTENT_TYPES.NUMBER, 1);
        var writer = new Content(CONTENT_TYPES.REGISTER, '$!');
        this.assign_binary(node, true, writer, reader1, '-', reader2);
    }
}
encoded_levels.push(decode(''));
class L2Builder extends L1Builder {
    handle(node) {
        if (node.type === "scope") { 
            var frame = new StackFrame();
            frame.next = this.head;
            this.head = frame;
            this.in_scope = true;
            Stack.push(this.variable_pointer);
            for (var i = 0; i < node.childCount; i++){
                this.handle(node.child(i));
            }
            var offset = Stack.pop() - this.variable_pointer;
            this.head = frame.next;
            this.variable_pointer += offset;
            if (this.variable_pointer === 112) {
                this.in_scope = false;
            }
        } 
        else if (node.type === "variable" && this.in_scope) {
            var variable_size = get_variable_bytesize(node.child(2).text);
            this.variable_pointer -= variable_size;
            this.head.variables[node.child(0).text] = [this.stack_pointer - this.variable_pointer, node.child(2).text];
            var expression = super.handle(node.child(4));
            this.push_statement(node, new ByteCode(this.get_opcode(expression), [false, new Content(CONTENT_TYPES.MEMORY, new Expression(CONTENT_TYPES.BIN_EXPRESSION, new Content(CONTENT_TYPES.REGISTER, '$sp'), '-', new Content(CONTENT_TYPES.NUMBER, this.stack_pointer - this.variable_pointer)), get_datatype(node.child(2).text))].concat(this.convert_expression_to_array(expression))));            
        }
        else if (node.type === "variable_name" && this.in_scope) {
            var current = this.head;
            while (current != null) {
                if (node.text in current.variables) {
                    return new Content(CONTENT_TYPES.MEMORY, new Expression(CONTENT_TYPES.BIN_EXPRESSION, new Content(CONTENT_TYPES.REGISTER, '$sp'), '-', new Content(CONTENT_TYPES.NUMBER,  current.variables[node.text][0])),  get_datatype(current.variables[node.text][1]));
                }   
                current = current.next;
            }
            return new Content(CONTENT_TYPES.MEMORY, new Content(CONTENT_TYPES.DATA, '&_' + node.text), get_datatype(this.variables["&_" + node.text]));
        }
        else if (node.type === "variable") { 
            this.variable_declaration(node);
        } else if (node.type === "variable_name") {
            return new Content(CONTENT_TYPES.MEMORY, new Content(CONTENT_TYPES.DATA, '&_' + node.text), get_datatype(this.variables["&_" + node.text]));
        } else {
            return super.handle(node);
        }
    }

    variable_declaration(node) {
        var variable_name = node.child(0);
        var type = node.child(2);
        var expression = node.child(4);
        var variable_size = parseInt(type.text.replace(/\D/g, ''));
        this.variables['&_' + variable_name.text] = type.text;
        var memory_allocation = "";
        for (var i = 0; i < variable_size/8; i++) {
            memory_allocation += "0";
        }
        this.data['&_' + variable_name.text] = memory_allocation;
        var expression = this.handle(expression);
        this.push_statement(node, new ByteCode(this.get_opcode(expression), [false, new Content(CONTENT_TYPES.MEMORY, new Content(CONTENT_TYPES.DATA, '&_' + variable_name.text), get_datatype(type.text))].concat(this.convert_expression_to_array(expression))));
    }

    get_opcode(expression) {
        if (expression.type === CONTENT_TYPES.BIN_EXPRESSION) {
            return OP.ASSIGN_BIN;
        } else if (expression.type === CONTENT_TYPES.UN_EXPRESSION) {
            return OP.ASSIGN_UN;
        } else if (expression.type === CONTENT_TYPES.EXPRESSION) {
            return OP.ASSIGN;
        }
    }

    variables = {}
    head = null
    stack_pointer = 112;
    variable_pointer = 112;
    in_scope = false;

    convert_expression_to_array(expression) {
        switch (expression.type) {
            case CONTENT_TYPES.EXPRESSION:
                return [expression.reader1];
            case CONTENT_TYPES.UN_EXPRESSION:
                return [expression.opr, expression.reader1];
            case CONTENT_TYPES.BIN_EXPRESSION:
                return [expression.reader1, expression.opr, expression.reader2]
        }
    }
}

class StackFrame {
    next;
    variables;
    constructor() {
        this.next= null;
        this.variables = {};
    }
}

const Stack = {
    items: [],

    push(element)
    {
        this.items.push(element);
    },

    pop()
    {
        if (this.items.length == 0)
            return "Underflow";
        return this.items.pop();
    }
}
encoded_levels.push(decode(''));
for (var i = 0; i < encoded_levels.length; i++){
    var opt = document.createElement('option');
    opt.value = i;
    opt.innerHTML = "L"+i;
    document.getElementById('levels').appendChild(opt);
}
document.getElementById('levels').value = 2;

function get_builder(level) {
  switch (level) {
        case 0:
            return new L0Builder();
        case 1:
            return new L1Builder();
        case 2:
            return new L2Builder();
}
}